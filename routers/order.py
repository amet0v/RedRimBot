import os.path
import pickle

from aiogram import Bot, types, Router, F
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile

from filters.chat_type import ChatTypeFilter
from config import texts

#with open("token.txt", "r") as t:
#    token = t.read()
#token = "907506430:AAH0f1oBIs8YCUqu8Z1GehNjrFPE9LPCL5k"
token = "6907506430:AAH0f1oBIs8YCUqu8Z1GehNjrFPE9LPCL5k"
bot = Bot(token=token)

router = Router()
sg = -1002145835504
pinned_chats = [119, 116, 86, 102, None]


class Order:
    def __init__(self, customer, topic):
        self.customer = customer
        self.topic = topic

    def __str__(self):
        return f"customer id: {self.customer}\ntopic id: {self.topic}"


class OrderManagement(StatesGroup):
    approve_closing = State()
    set_price = State()
    change_topic_name = State()


o_buttons = [
        [types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
        [types.InlineKeyboardButton(
            text="üñº –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã", callback_data="portfolio")],
        [types.InlineKeyboardButton(
            text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
    ]


@router.callback_query(F.data == "change_topic_name")
async def cb_close_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–¥–ø–∏—à–∏—Ç–µ –∑–∞–∫–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ \"`–û—Ç–º–µ–Ω–∞`\"",
                                  parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(OrderManagement.change_topic_name)


@router.callback_query(F.data == "close_order")
async def cb_close_order(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ \"`–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑`\"",
                                  parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(OrderManagement.approve_closing)


@router.callback_query(F.data == "send_price")
async def cb_send_price(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ \"`–û—Ç–º–µ–Ω–∞`\"",
                                  parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(OrderManagement.set_price)


@router.callback_query(F.data == "create_order")
async def cb_create_order(callback: types.CallbackQuery):
    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
    blacklist = []
    with open("config/blacklist.txt", "r") as f:
        for line in f:
            if line != "":
                blacklist.append(int(line))
    if callback.from_user.id in blacklist:
        await callback.message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏")
        return
    #–µ—Å–ª–∏ –≤—Å–µ –æ–∫
    file_name = "orders/order-" + str(callback.from_user.id) + ".pickle"
    if os.path.exists(file_name):
        await callback.message.answer("–£ –≤–∞—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –∑–∞–∫–∞–∑")
    else:
        with open("config/order_id.txt", "r") as f:
            order_id = f.read()
        new_topic = await bot.create_forum_topic(sg, name="–ó–∞–∫–∞–∑ ‚Ññ" + order_id + " - " + str(callback.from_user.full_name),
                                                 icon_custom_emoji_id="5350452584119279096")
        order_id = int(order_id) + 1
        with open("config/order_id.txt", "w") as f:
            f.write(str(order_id))
        new_order = Order(callback.from_user.id, new_topic.message_thread_id)
        with open(file_name, 'wb') as f:
            pickle.dump(new_order, f)
        # knopka
        buttons = [
            [
                types.InlineKeyboardButton(
                    text="–ü–æ–¥–ø–∏—Å–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="change_topic_name")
            ],
            [
                types.InlineKeyboardButton(
                    text="–£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É", callback_data="send_price"),
                types.InlineKeyboardButton(
                    text="–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑", callback_data="close_order")
            ]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await bot.send_message(sg, f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–º\n" + "username: @" + str(callback.from_user.username) + "\n" + str(new_order),
                               new_order.topic, reply_markup=keyboard)
        # ne knopka
    o_keyboard = types.InlineKeyboardMarkup(inline_keyboard=o_buttons)
    await bot.edit_message_media(types.InputMediaPhoto(media=FSInputFile("images/order.png")),
                                 callback.message.chat.id, callback.message.message_id)
    await bot.edit_message_caption(callback.message.chat.id, callback.message.message_id, caption=texts.o_text,
                                   parse_mode=ParseMode.MARKDOWN_V2)
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id,
                                        reply_markup=o_keyboard)
        #await callback.message.answer("–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∑–∞–∫–∞–∑")


@router.message(OrderManagement.change_topic_name)
async def cmd_change_topic_name(message: types.Message, bot: Bot, state: FSMContext):
    cancel_text = "–û—Ç–º–µ–Ω–∞"
    # topic.message_thread_id = message.message_thread_id
    if message.text != cancel_text:
        try:
            await bot.edit_forum_topic(sg, message.message_thread_id, message.text)
            await state.clear()
        except TelegramBadRequest as ex:
            if ex.message == "Bad Request: TOPIC_NOT_MODIFIED":
                await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ\.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ \"`–û—Ç–º–µ–Ω–∞`\"",
                                     parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.\n–í–æ–∑–≤—Ä–∞—Ç –∫ —á–∞—Ç—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º")
        await state.clear()


@router.message(OrderManagement.approve_closing)
async def cmd_close_approved(message: types.Message, bot: Bot, state: FSMContext):
    to_delete = None
    approve_text = "–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑"
    if message.text == approve_text:
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç")  # –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
        for file in os.listdir("orders"):
            with open("orders/" + file, 'rb') as f:
                loop_data = pickle.load(f)
                if loop_data.topic == message.message_thread_id:
                    await bot.send_message(loop_data.customer,
                                           "‚úÖ –î–∏–∑–∞–π–Ω–µ—Ä –∑–∞–∫—Ä—ã–ª –≤–∞—à –∑–∞–∫–∞–∑.\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ü§ó")  # –∑–∞–∫–∞–∑—á–∏–∫—É
                    to_delete = "orders/" + file
        await bot.edit_message_reply_markup(sg, message.message_thread_id+1, reply_markup=None)
        await bot.close_forum_topic(sg, message.message_thread_id)
        await state.clear()
        if os.path.exists(to_delete):
            os.remove(to_delete)
    else:
        if not message.from_user.is_bot:
            await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\n–í–æ–∑–≤—Ä–∞—Ç –∫ —á–∞—Ç—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º")
            await state.clear()


@router.message(OrderManagement.set_price)
async def cmd_price_approved(message: types.Message, bot: Bot, state: FSMContext):
    cancel_text = "–û—Ç–º–µ–Ω–∞"
    if message.text != cancel_text:
        price_text = "üí≤–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: " + message.text + texts.price_tail
        await message.answer("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–∫–∞–∑—á–∏–∫—É —Ç–µ–∫—Å—Ç:\n\n" + price_text, parse_mode=ParseMode.MARKDOWN_V2)
        for file in os.listdir("orders"):
            with open("orders/" + file, 'rb') as f:
                loop_data = pickle.load(f)
                if loop_data.topic == message.message_thread_id:
                    await bot.send_message(loop_data.customer, price_text, parse_mode=ParseMode.MARKDOWN_V2)
                    break
            f.close()
    else:
        await message.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ —á–∞—Ç—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º")
    await state.clear()


@router.message(StateFilter(None), ChatTypeFilter(chat_type='private'))
async def receive_customer_message(message: types.Message):
    if not message.from_user.is_bot:
        file_name = "orders/order-" + str(message.from_user.id) + ".pickle"
        if os.path.exists(file_name):
            with open(file_name, 'rb') as f:
                order_data = pickle.load(f)
            await bot.forward_message(sg, message.chat.id, message.message_id, message_thread_id=order_data.topic)
            await message.react([types.ReactionTypeEmoji(emoji="‚ö°")])
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ –æ—Ç–∫—Ä—ã—Ç –∑–∞–∫–∞–∑")


@router.message(StateFilter(None), ChatTypeFilter(chat_type='supergroup'))
async def receive_designer_message(message: types.Message):
    if not message.from_user.is_bot:
        for file in os.listdir("orders"):
            with open("orders/" + file, 'rb') as f:
                loop_data = pickle.load(f)
                if loop_data.topic == message.message_thread_id:
                    if message.message_thread_id not in pinned_chats:
                        await bot.copy_message(loop_data.customer, message.chat.id, message.message_id)
                        await message.react([types.ReactionTypeEmoji(emoji="‚ö°")])
